---

- name: Prepare all hosts
  hosts: jenkins_master_group, jenkins_agent_group
  become: true
  tasks:
    - name: Create group for Jenkins user
      group:
        name: "{{ jenkins_user_group }}"
        state: present

    - name: Create Jenkins user
      user:
        name: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        create_home: yes

    - name: Install Java packages
      apt:
        name: "{{ java_packages | split(',') }}"
        state: present
        update_cache: true

- name: Install ACL package on master
  hosts: jenkins_master_group
  become: true
  tasks:
    - name: Install ACL package
      apt:
        name: acl
        state: present
        update_cache: true

- name: Create Jenkins user and generate SSH key on master
  hosts: jenkins_master_group
  become: true
  tasks:
    - name: Generate SSH key for Jenkins user on master
      user:
        name: "{{ jenkins_user_name }}"
        generate_ssh_key: true
        ssh_key_bits: 2048
        ssh_key_type: rsa
      register: ssh_key_info

    - name: Set fact for Jenkins master's public key
      set_fact:
        jenkins_master_public_key: "{{ ssh_key_info.ssh_public_key }}"

    - name: Ensure /home/{{ jenkins_user_name }}/.ssh directory exists on master
      file:
        path: "/home/{{ jenkins_user_name }}/.ssh"
        state: directory
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0700'

- name: Add Jenkins agents to known_hosts on master
  hosts: jenkins_master_group
  become: true
  tasks:
    - name: Add Jenkins agents to known_hosts on master
      become_user: root
      shell: |
        ssh-keyscan -H {{ hostvars[item].ansible_host }} >> /home/jenkins/.ssh/known_hosts
      with_items: "{{ groups['jenkins_agent_group'] }}"
      args:
        executable: /bin/bash


- name: Install Jenkins on master node
  hosts: jenkins_master_group
  become: true
  tasks:
    - name: Install dependencies for Jenkins
      apt:
        name:
          - openjdk-21-jdk
          - gnupg
          - ca-certificates
          - curl
          - unzip
        state: present
        update_cache: true

    - name: Add Jenkins apt key
      apt_key:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
        state: present
        keyring: /etc/apt/keyrings/jenkins.gpg

    - name: Add Jenkins apt repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/jenkins.gpg] https://pkg.jenkins.io/debian-stable binary/
        state: present
        update_cache: true

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Configure Jenkins to listen on all interfaces
      lineinfile:
        path: /etc/default/jenkins
        regexp: ^HTTP_HOST=
        line: HTTP_HOST=0.0.0.0
      notify:
        - Restart Jenkins

    - name: Start and enable Jenkins
      systemd:
        name: jenkins
        state: started
        enabled: true

  handlers:
    - name: Restart Jenkins
      service:
        name: jenkins
        state: restarted

- name: Configure Jenkins agents
  hosts: jenkins_agent_group
  become: true
  tasks:
    - name: Ensure /home/{{ jenkins_user_name }}/.ssh directory exists on agents
      file:
        path: "/home/{{ jenkins_user_name }}/.ssh"
        state: directory
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0700'

    - name: Install unzip package on agent
      apt:
        name: unzip
        state: present
        update_cache: true

    - name: Download Terraform binary from Yandex Cloud on agent
      get_url:
        url: https://hashicorp-releases.yandexcloud.net/terraform/1.9.7/terraform_1.9.7_linux_amd64.zip
        dest: /tmp/terraform_1.9.7_linux_amd64.zip

    - name: Unzip Terraform binary on agent
      unarchive:
        src: /tmp/terraform_1.9.7_linux_amd64.zip
        dest: /usr/local/bin/
        remote_src: true
        mode: '0755'

    - name: Verify Terraform installation on agent
      command: terraform --version
      register: terraform_version_agent

    - name: Show Terraform version on agent
      debug:
        msg: "Terraform version on agent is {{ terraform_version_agent.stdout }}"

    - name: Create Terraform config file (.terraformrc)
      copy:
        dest: "/home/{{ jenkins_user_name }}/.terraformrc"
        content: |
          provider_installation {
            network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
            direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0644'

    - name: Add Jenkins master's public key to authorized_keys on agents
      authorized_key:
        user: "{{ jenkins_user_name }}"
        key: "{{ hostvars['jenkins_master'].jenkins_master_public_key }}"
        state: present

    - name: Create agent directory
      file:
        path: "{{ jenkins_agent_dir }}"
        state: directory
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"

    - name: Ensure the keys directory exists on Jenkins agent
      file:
        path: "/home/{{ jenkins_user_name }}/.ssh"
        state: directory
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0700'
      delegate_to: "{{ inventory_hostname }}"

    - name: Copy public SSH key to Jenkins agent
      copy:
        src: "~/.ssh/id_ed25519_aleksei.pub"
        dest: "/home/{{ jenkins_user_name }}/.ssh/id_ed25519_aleksei.pub"
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0644'
      delegate_to: "{{ inventory_hostname }}"

    - name: Copy private SSH key to Jenkins agent
      copy:
        src: "~/.ssh/private_vm_key.pub"
        dest: "/home/{{ jenkins_user_name }}/.ssh/private_vm_key.pub"
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
        mode: '0600'
      delegate_to: "{{ inventory_hostname }}"

    - name: Add Docker repository
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: true

    - name: Add Kubernetes apt-key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: "0644"
        force: true

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        state: present
        update_cache: true

    - name: Install required packages
      apt:
        name:
          - git
          - python3
          - python3-pip
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - kubectl
        state: present
        update_cache: true
      retries: 5
      delay: 60
      register: install_result
      until: install_result is succeeded

    - name: Update pip
      pip:
        name: pip
        state: latest
        executable: pip3

    - name: Install Ansible and SELinux dependencies
      pip:
        name:
          - ansible<3.0
          - selinux
        state: present

    - name: Create Docker group
      group:
        name: docker
        state: present

    - name: Add Jenkins user to Docker group
      user:
        name: "{{ jenkins_user_name }}"
        groups: docker
        append: true

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
        enabled: true

    - name: Download Jenkins agent JAR file
      get_url:
        url: "http://{{ hostvars['jenkins_master'].ansible_host }}:8080/jnlpJars/agent.jar"
        dest: "{{ jenkins_agent_dir }}"
        owner: "{{ jenkins_user_name }}"
        group: "{{ jenkins_user_group }}"
      register: install_agent
      until: install_agent is succeeded
      retries: 10
      delay: 10
